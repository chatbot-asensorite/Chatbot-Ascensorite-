import streamlit as st
import pandas as pd
import json
import datetime
from PIL import Image
import io
import base64
from typing import Dict, List
import sqlite3
import os
import re

# Configuration de la page
st.set_page_config(
    page_title="üîß IA D√©pannage Ascenseurs",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personnalis√© pour un beau design
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .chat-message {
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .user-message {
        background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        color: white;
        margin-left: 2rem;
    }
    .bot-message {
        background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
        color: white;
        margin-right: 2rem;
    }
    .brand-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #4facfe;
        margin: 0.5rem 0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }
    .error-code {
        background: #fee2e2;
        color: #991b1b;
        padding: 0.5rem;
        border-radius: 8px;
        font-family: monospace;
        font-weight: bold;
    }
    .solution-box {
        background: #f0fdf4;
        border: 2px solid #22c55e;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.5rem 1rem;
        font-weight: bold;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
</style>
""", unsafe_allow_html=True)

class ElevatorAI:
    def __init__(self):
        self.init_database()
        self.load_knowledge_base()
    
    def init_database(self):
        """Initialise la base de donn√©es SQLite pour sauvegarder les conversations"""
        try:
            conn = sqlite3.connect('elevator_data.db', check_same_thread=False)
            c = conn.cursor()
            
            # Table des conversations
            c.execute('''CREATE TABLE IF NOT EXISTS conversations
                         (id INTEGER PRIMARY KEY AUTOINCREMENT, 
                          timestamp TEXT, 
                          user_message TEXT, 
                          bot_response TEXT, 
                          brand TEXT, 
                          issue_type TEXT,
                          solved BOOLEAN DEFAULT 0)''')
            
            # Table des documents upload√©s
            c.execute('''CREATE TABLE IF NOT EXISTS documents
                         (id INTEGER PRIMARY KEY AUTOINCREMENT, 
                          filename TEXT, 
                          content TEXT, 
                          brand TEXT, 
                          doc_type TEXT, 
                          upload_date TEXT,
                          processed BOOLEAN DEFAULT 0)''')
            
            # Table des feedbacks utilisateurs
            c.execute('''CREATE TABLE IF NOT EXISTS feedback
                         (id INTEGER PRIMARY KEY AUTOINCREMENT, 
                          conversation_id INTEGER, 
                          rating INTEGER, 
                          comment TEXT, 
                          timestamp TEXT)''')
            
            conn.commit()
            conn.close()
        except Exception as e:
            st.error(f"Erreur base de donn√©es: {e}")
    
    def load_knowledge_base(self):
        """Base de connaissances compl√®te des ascenseurs"""
        self.knowledge = {
            'brands': {
                'otis': {
                    'name': 'Otis',
                    'models': ['GeN2', 'SkyRise', 'SkyBuild', 'MRL', 'Series 1', 'Compass'],
                    'common_codes': {
                        'E1': 'D√©faut capteur de porte - V√©rifier photocellules',
                        'E2': 'Surtemps fermeture porte - Nettoyer rails',
                        'E3': 'D√©faut s√©quence porte - Calibrer capteurs',
                        'F1': 'D√©faut survitesse - Contr√¥ler r√©gulateur',
                        'F2': 'D√©faut frein de s√©curit√© - Test freins obligatoire',
                        'UC': 'D√©faut communication - Red√©marrer contr√¥leur',
                        'OL': 'Surcharge - V√©rifier cellule de charge',
                        'TS': 'Arr√™t √©tage - Probl√®me capteur niveau'
                    },
                    'diagnostic_steps': {
                        'porte': [
                            'Nettoyer seuils et rails de porte',
                            'V√©rifier alignement des capteurs',
                            'Contr√¥ler moteur de porte',
                            'Tester photocellules de s√©curit√©'
                        ],
                        'moteur': [
                            'V√©rifier connexions √©lectriques',
                            'Contr√¥ler variateur de fr√©quence',
                            'Mesurer r√©sistance bobinages',
                            'Tester encoder de position'
                        ]
                    }
                },
                'kone': {
                    'name': 'Kone',
                    'models': ['MonoSpace', 'EcoSpace', 'MiniSpace', 'TranSys', 'MachineRoom-Less'],
                    'common_codes': {
                        'F7': 'Temps d√©pass√© fermeture porte',
                        'F8': 'D√©faut capteur porte',
                        'A1': 'D√©faut moteur de traction',
                        'A2': 'D√©faut syst√®me de frein',
                        'KCE': 'Erreur contr√¥leur KCE',
                        'ECO': 'D√©faut syst√®me EcoSpace',
                        'COP': 'Erreur boutons cabine'
                    },
                    'diagnostic_steps': {
                        'ecospace': [
                            'Calibrer syst√®me EcoSpace',
                            'V√©rifier capteurs de pr√©sence',
                            'Nettoyer optiques de d√©tection',
                            'Reset param√®tres usine'
                        ],
                        'kce': [
                            'Red√©marrer contr√¥leur KCE',
                            'V√©rifier connexion Ethernet',
                            'Contr√¥ler alimentation 24V',
                            'Reset configuration r√©seau'
                        ]
                    }
                },
                'schindler': {
                    'name': 'Schindler',
                    'models': ['3300', '5500', '7000', 'PORT Technology', 'CleanMobility'],
                    'common_codes': {
                        '88': 'D√©faut porte principale',
                        '44': 'D√©faut survitesse d√©tect√©e',
                        '22': 'D√©faut alimentation syst√®me',
                        'PORT': 'Erreur syst√®me PORT',
                        '33': 'Probl√®me communication',
                        '77': 'D√©faut frein de s√©curit√©'
                    },
                    'diagnostic_steps': {
                        'port': [
                            'Red√©marrer syst√®me PORT',
                            'V√©rifier connexions r√©seau',
                            'Contr√¥ler serveur principal',
                            'Reset base de donn√©es'
                        ]
                    }
                },
                'thyssenkrupp': {
                    'name': 'ThyssenKrupp',
                    'models': ['Evolution', 'Synergy', 'Essence', 'TWIN', 'MULTI'],
                    'common_codes': {
                        'Dr1': 'D√©faut porte cabine',
                        'Dr2': 'D√©faut porte pali√®re',
                        'Sp1': 'Survitesse d√©tect√©e',
                        'Br1': 'D√©faut frein √©lectrique',
                        'Mo1': 'D√©faut moteur traction'
                    }
                },
                'mitsubishi': {
                    'name': 'Mitsubishi',
                    'models': ['ELENESSA', 'NEXIEZ', 'GPS-III'],
                    'common_codes': {
                        'Er1': 'Erreur capteur porte',
                        'Er2': 'Probl√®me communication',
                        'Er3': 'D√©faut alimentation'
                    }
                }
            },
            'general_safety': [
                "üî¥ TOUJOURS couper l'alimentation avant intervention",
                "ü¶∫ Porter les EPI obligatoires (casque, chaussures s√©curit√©)",
                "üîí Utiliser les dispositifs de consignation",
                "‚ö†Ô∏è V√©rifier tous les arr√™ts d'urgence",
                "üìû Pr√©venir la maintenance avant intervention",
                "üìã Documenter toute intervention"
            ]
        }
    
    def analyze_message(self, message: str) -> Dict:
        """Analyse intelligente du message utilisateur"""
        message_lower = message.lower()
        
        # D√©tection de marque avec synonymes
        brand_synonyms = {
            'otis': ['otis', 'gen2', 'skyrise'],
            'kone': ['kone', 'monospace', 'ecospace', 'minispace'],
            'schindler': ['schindler', '3300', '5500', '7000', 'port'],
            'thyssenkrupp': ['thyssenkrupp', 'thyssen', 'tk', 'evolution', 'synergy'],
            'mitsubishi': ['mitsubishi', 'elenessa', 'nexiez']
        }
        
        detected_brand = None
        for brand_key, synonyms in brand_synonyms.items():
            if any(syn in message_lower for syn in synonyms):
                detected_brand = brand_key
                break
        
        # D√©tection de codes d'erreur avec regex
        detected_codes = []
        error_patterns = [
            r'\b[A-Z]\d+\b',  # F1, E2, etc.
            r'\b\d{1,3}\b',   # 88, 44, etc.
            r'\b[A-Z]{2,4}\b' # UC, KCE, PORT, etc.
        ]
        
        for pattern in error_patterns:
            matches = re.findall(pattern, message.upper())
            detected_codes.extend(matches)
        
        # Validation des codes selon la marque
        valid_codes = []
        if detected_brand and detected_brand in self.knowledge['brands']:
            brand_codes = self.knowledge['brands'][detected_brand]['common_codes']
            for code in detected_codes:
                if code in brand_codes:
                    valid_codes.append(code)
        
        # D√©tection de probl√®mes par mots-cl√©s
        issue_keywords = {
            'porte': ['porte', 'door', 'fermeture', 'ouverture', 'photocellule', 'capteur'],
            'moteur': ['moteur', 'motor', 'vitesse', 'speed', 'traction', 'rotation'],
            'frein': ['frein', 'brake', 'arr√™t', 'blocage', 's√©curit√©'],
            'communication': ['communication', 'r√©seau', 'can', 'ethernet', 'connexion'],
            'nivellement': ['niveau', 'nivellement', 'alignement', 'position'],
            'surcharge': ['surcharge', 'poids', 'charge', 'capacit√©'],
            'survitesse': ['survitesse', 'vitesse', 'r√©gulateur', 'limiteur']
        }
        
        detected_issues = []
        for issue_type, keywords in issue_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                detected_issues.append(issue_type)
        
        # Analyse de sentiment (urgence)
        urgency_keywords = ['urgent', 'bloqu√©', 'panne', 'arr√™t', 'coinc√©', 'danger']
        is_urgent = any(keyword in message_lower for keyword in urgency_keywords)
        
        return {
            'brand': detected_brand,
            'codes': valid_codes,
            'issues': detected_issues,
            'is_urgent': is_urgent,
            'message': message
        }
    
    def generate_response(self, analysis: Dict) -> str:
        """G√©n√®re une r√©ponse d√©taill√©e et personnalis√©e"""
        response = ""
        
        # En-t√™te avec urgence
        if analysis['is_urgent']:
            response += "üö® **INTERVENTION URGENTE D√âTECT√âE** üö®\n\n"
        
        response += "ü§ñ **Assistant IA Sp√©cialis√© Ascenseurs**\n\n"
        
        # Informations sur la marque
        if analysis['brand']:
            brand_info = self.knowledge['brands'][analysis['brand']]
            response += f"**üè≠ Marque identifi√©e:** {brand_info['name']}\n"
            response += f"**üìã Mod√®les compatibles:** {', '.join(brand_info['models'][:3])}...\n\n"
            
            # Codes d'erreur avec solutions
            if analysis['codes']:
                response += "**üîç CODES D'ERREUR ANALYS√âS:**\n"
                for code in analysis['codes']:
                    if code in brand_info['common_codes']:
                        description = brand_info['common_codes'][code]
                        response += f"```\nüö® {code}: {description}\n```\n"
                response += "\n"
        
        # Solutions par type de probl√®me
        if analysis['issues']:
            response += "**üîß SOLUTIONS RECOMMAND√âES:**\n\n"
            
            for issue in analysis['issues']:
                response += f"**‚û§ Probl√®me {issue.upper()}:**\n"
                
                if analysis['brand'] and issue in self.knowledge['brands'][analysis['brand']].get('diagnostic_steps', {}):
                    steps = self.knowledge['brands'][analysis['brand']]['diagnostic_steps'][issue]
                    for i, step in enumerate(steps, 1):
                        response += f"   {i}. {step}\n"
                else:
                    # Solutions g√©n√©riques
                    generic_solutions = {
                        'porte': ['Nettoyer rails et seuils', 'V√©rifier capteurs', 'Contr√¥ler moteur porte'],
                        'moteur': ['V√©rifier connexions', 'Contr√¥ler alimentation', 'Mesurer r√©sistances'],
                        'communication': ['Red√©marrer syst√®me', 'V√©rifier c√¢blage', 'Reset param√®tres']
                    }
                    if issue in generic_solutions:
                        for i, step in enumerate(generic_solutions[issue], 1):
                            response += f"   {i}. {step}\n"
                
                response += "\n"
        
        # Proc√©dures de s√©curit√©
        response += "**‚ö†Ô∏è S√âCURIT√â OBLIGATOIRE:**\n"
        for safety_rule in self.knowledge['general_safety'][:4]:
            response += f"‚Ä¢ {safety_rule}\n"
        
        # Contact support
        if analysis['brand']:
            response += f"\n**üìû Support {self.knowledge['brands'][analysis['brand']]['name']}:** Contactez le service technique officiel en cas de doute\n"
        
        response += "\n**üí° Besoin d'aide suppl√©mentaire ?** Uploadez une photo du probl√®me ou des sch√©mas techniques !"
        
        return response
    
    def save_conversation(self, user_msg: str, bot_response: str, analysis: Dict):
        """Sauvegarde intelligente des conversations"""
        try:
            conn = sqlite3.connect('elevator_data.db', check_same_thread=False)
            c = conn.cursor()
            
            timestamp = datetime.datetime.now().isoformat()
            brand = analysis.get('brand', 'unknown')
            issue_type = ','.join(analysis.get('issues', []))
            
            c.execute("""INSERT INTO conversations 
                         (timestamp, user_message, bot_response, brand, issue_type) 
                         VALUES (?, ?, ?, ?, ?)""", 
                      (timestamp, user_msg, bot_response, brand, issue_type))
            
            conn.commit()
            conn.close()
            
            # Mise √† jour des statistiques en session
            if 'stats' not in st.session_state:
                st.session_state.stats = {'total': 0, 'brands': {}}
            
            st.session_state.stats['total'] += 1
            if brand != 'unknown':
                st.session_state.stats['brands'][brand] = st.session_state.stats['brands'].get(brand, 0) + 1
                
        except Exception as e:
            st.error(f"Erreur sauvegarde: {e}")

def get_stats():
    """R√©cup√®re les statistiques d'utilisation"""
    try:
        conn = sqlite3.connect('elevator_data.db', check_same_thread=False)
        c = conn.cursor()
        
        # Total consultations
        c.execute("SELECT COUNT(*) FROM conversations")
        total = c.fetchone()[0]
        
        # Par marque
        c.execute("SELECT brand, COUNT(*) FROM conversations WHERE brand != 'unknown' GROUP BY brand")
        brands_data = c.fetchall()
        
        # Probl√®mes fr√©quents
        c.execute("SELECT issue_type, COUNT(*) FROM conversations WHERE issue_type != '' GROUP BY issue_type ORDER BY COUNT(*) DESC LIMIT 5")
        issues_data = c.fetchall()
        
        conn.close()
        
        return {
            'total': total,
            'brands': dict(brands_data),
            'issues': dict(issues_data)
        }
    except:
        return {'total': 0, 'brands': {}, 'issues': {}}

# Interface Streamlit principale
def main():
    # En-t√™te attractif
    st.markdown("""
    <div class="main-header">
        <h1>üîß Assistant IA - D√©pannage Ascenseurs</h1>
        <h3>Sp√©cialiste Multi-Marques ‚Ä¢ Diagnostic Intelligent ‚Ä¢ Solutions Rapides</h3>
        <p>Otis ‚Ä¢ Kone ‚Ä¢ Schindler ‚Ä¢ ThyssenKrupp ‚Ä¢ Mitsubishi ‚Ä¢ Et plus encore...</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialisation de l'IA
    if 'ai_assistant' not in st.session_state:
        st.session_state.ai_assistant = ElevatorAI()
        st.success("üöÄ IA initialis√©e avec succ√®s !")
    
    if 'messages' not in st.session_state:
        st.session_state.messages = []
    
    # Layout principal en colonnes
    col_main, col_sidebar = st.columns([3, 1])
    
    # Interface de chat principal
    with col_main:
        st.header("üí¨ Diagnostic Intelligent")
        
        # Zone de saisie am√©lior√©e
        st.markdown("**D√©crivez votre probl√®me d'ascenseur :**")
        user_input = st.text_area(
            "",
            placeholder="Ex: Ascenseur Otis GeN2 bloqu√© au 3√®me √©tage, code erreur E1 affich√©, portes ne se ferment plus...",
            height=120,
            help="Plus vous donnez de d√©tails, meilleur sera le diagnostic !"
        )
        
        col1, col2, col3 = st.columns([1, 1, 2])
        
        with col1:
            send_button = st.button("üöÄ Diagnostic", type="primary")
        
        with col2:
            clear_button = st.button("üóëÔ∏è Effacer")
        
        # Upload de fichiers
        st.markdown("**üìé Ajouter des documents (optionnel) :**")
        uploaded_files = st.file_uploader(
            "",
            type=['pdf', 'jpg', 'jpeg', 'png', 'doc', 'docx'],
            accept_multiple_files=True,
            help="Sch√©mas techniques, photos du probl√®me, manuels..."
        )
        
        if uploaded_files:
            st.success(f"‚úÖ {len(uploaded_files)} fichier(s) pr√™t(s) √† analyser")
        
        # Traitement du message
        if send_button and user_input:
            with st.spinner("üß† Analyse en cours..."):
                # Analyse
                analysis = st.session_state.ai_assistant.analyze_message(user_input)
                response = st.session_state.ai_assistant.generate_response(analysis)
                
                # Sauvegarde
                st.session_state.ai_assistant.save_conversation(user_input, response, analysis)
                
                # Ajout √† l'historique
                st.session_state.messages.extend([
                    {
                        'type': 'user',
                        'conte
